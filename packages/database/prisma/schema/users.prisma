model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    // New admin type field - only one user can be admin
    role UserRole @default(USER)

    // Profile information
    tagline     String?
    description String?
    workEmail   String?

    // Relationships to new models
    profileImages ProfileImage[]
    socials       Social[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// User role enum
enum UserRole {
    USER
    ADMIN
}

// Model for storing multiple profile images with version control
model ProfileImage {
    id        String   @id @default(cuid())
    url       String
    isCurrent Boolean  @default(false)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Model for storing social media links
model Social {
    id        String     @id @default(cuid())
    platform  SocialType
    url       String
    userId    String
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

enum SocialType {
    GITHUB
    LINKEDIN
    TWITTER
    INSTAGRAM
    FACEBOOK
    YOUTUBE
    OTHER
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
